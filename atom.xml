<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lcf1998</title>
  
  <subtitle>I am networker</subtitle>
  <link href="//atom.xml" rel="self"/>
  
  <link href="http://yousite.com/"/>
  <updated>2020-02-04T09:18:56.000Z</updated>
  <id>http://yousite.com/</id>
  
  <author>
    <name>Lee Jerry</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>树莓派-linux-dash</title>
    <link href="http://yousite.com/2020/02/04/%E6%A0%91%E8%8E%93%E6%B4%BE-linux-dash/"/>
    <id>http://yousite.com/2020/02/04/%E6%A0%91%E8%8E%93%E6%B4%BE-linux-dash/</id>
    <published>2020-02-04T09:18:56.000Z</published>
    <updated>2020-02-04T09:18:56.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>linux-dash/app/server</li><li>node index.js –port 1234<a id="more"></a><h1 id="基于树莓派搭建一个实现实时监控系统"><a href="#基于树莓派搭建一个实现实时监控系统" class="headerlink" title="基于树莓派搭建一个实现实时监控系统"></a>基于树莓派搭建一个实现实时监控系统</h1></li></ul><p>—体积小，速度快，配置方便—</p><h2 id="1-安装linux-dash"><a href="#1-安装linux-dash" class="headerlink" title="1 安装linux-dash"></a>1 安装linux-dash</h2><hr><pre><code class="bash">git clone --depth 1 https://github.com/afaqurk/linux-dashcd linux-dash/app/server</code></pre><hr><h2 id="2-使用Nodejs运行Linux-Dash"><a href="#2-使用Nodejs运行Linux-Dash" class="headerlink" title="2 使用Nodejs运行Linux-Dash"></a>2 使用Nodejs运行Linux-Dash</h2><hr><p><em>安装 nodejs –<a href="">树莓派安装配置nodejs</a>– 这篇教程</em></p><hr><h2 id="3-安装依赖"><a href="#3-安装依赖" class="headerlink" title="3 安装依赖"></a>3 安装依赖</h2><hr><ul><li>在linux-dash/app/server文件夹下输入命令<pre><code class="bash">npm install --production</code></pre></li></ul><p><em>(这个过程需要等待)</em></p><h2 id="4-启动linux-dash"><a href="#4-启动linux-dash" class="headerlink" title="4 启动linux-dash"></a>4 启动linux-dash</h2><hr><ul><li>在linux-dash/app/server目录下执行以下命令<pre><code class="bash">sudo node index.js --port 1234(如果不指定端口，会默认80端口)</code></pre></li><li>然后打开浏览器，http://树莓派的ip:端口</li></ul><hr><ul><li>用Pyhton语言运行<br>``` bash</li></ul><p><em>python index.py –port 1234</em></p><pre><code>+ 用Go语言运行``` bash*go run index.go --port 1234*</code></pre><p><em>(python 运行执行出来的结果不理想不建议)</em></p><h2 id="5-开机自启动linux-dash"><a href="#5-开机自启动linux-dash" class="headerlink" title="5 开机自启动linux-dash"></a>5 开机自启动linux-dash</h2><p>新建一个脚本linux-dash.sh</p><pre><code class="bash">#!/bin/bashcd /linux-dash/app/serversudo node index.js --port 1111(端口号随便定)</code></pre><p>修改文件其权限</p><pre><code class="bash">sudo chmod 755 linux-dash.sh</code></pre><p><em>把linux-dash.sh脚本放进/etc/profile.d/</em><br><em>重启电脑就OK了</em></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;linux-dash/app/server&lt;/li&gt;
&lt;li&gt;node index.js –port 1234
    
    </summary>
    
    
    
      <category term="raspberry pi" scheme="http://yousite.com/tags/raspberry-pi/"/>
    
      <category term="linux-dash" scheme="http://yousite.com/tags/linux-dash/"/>
    
  </entry>
  
  <entry>
    <title>树莓派-gmediarender-无线音箱</title>
    <link href="http://yousite.com/2020/02/04/%E6%A0%91%E8%8E%93%E6%B4%BE-gmediarender-%E6%97%A0%E7%BA%BF%E9%9F%B3%E7%AE%B1/"/>
    <id>http://yousite.com/2020/02/04/%E6%A0%91%E8%8E%93%E6%B4%BE-gmediarender-%E6%97%A0%E7%BA%BF%E9%9F%B3%E7%AE%B1/</id>
    <published>2020-02-04T09:06:12.000Z</published>
    <updated>2020-02-04T09:06:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>无线音箱，DLNA推送音频，gmediarender -f “raspberry pi”</p><a id="more"></a><h1 id="基于gmediarender树莓派搭建DLNA客户端，只支持音频"><a href="#基于gmediarender树莓派搭建DLNA客户端，只支持音频" class="headerlink" title="基于gmediarender树莓派搭建DLNA客户端，只支持音频"></a>基于gmediarender树莓派搭建DLNA客户端，只支持音频</h1><p>目前搭建DLNA服务器有minidlna，不过不能进行DLNA推送，只能执行树莓派的媒体服务器</p><hr><h2 id="1-更新源，安装依赖"><a href="#1-更新源，安装依赖" class="headerlink" title="1 更新源，安装依赖"></a>1 更新源，安装依赖</h2><pre><code class="bash">+ sudo apt-get update+ sudo apt-get install libupnp-dev libgstreamer1.0-dev \gstreamer1.0-plugins-base gstreamer1.0-plugins-good \gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly \gstreamer1.0-alsa autoconf</code></pre><hr><h2 id="2-安装gmediarender"><a href="#2-安装gmediarender" class="headerlink" title="2 安装gmediarender"></a>2 安装gmediarender</h2><pre><code class="bash">git clone https://github.com/hzeller/gmrender-resurrect.gitcd gmrender-resurrectsudo ./autogen.shsudo ./configuresudo make sudo make install</code></pre><hr><h2 id="3-启动gmediarender"><a href="#3-启动gmediarender" class="headerlink" title="3 启动gmediarender"></a>3 启动gmediarender</h2><pre><code class="bash">sudo gmediarender -f &quot;输入DLNA设备名称&quot;</code></pre><hr><h2 id="4-添加到启动项"><a href="#4-添加到启动项" class="headerlink" title="4 添加到启动项"></a>4 添加到启动项</h2><pre><code class="bash">sudo nano /etc/rc.local</code></pre><p>在exit 0 前添加</p><pre><code class="bash">sudo gmediarender -f &quot;设备名称&quot; &amp;</code></pre><p><em>&amp;的意思是作为系统进程开机运行</em></p><hr><hr><h1 id="基于树莓派的Airplay无线音频传输"><a href="#基于树莓派的Airplay无线音频传输" class="headerlink" title="基于树莓派的Airplay无线音频传输"></a>基于树莓派的Airplay无线音频传输</h1><h2 id="1-安装依赖工具包"><a href="#1-安装依赖工具包" class="headerlink" title="1 安装依赖工具包"></a>1 安装依赖工具包</h2><pre><code class="bash">sudo apt-get install libssl-dev libavahi-client-dev libasound2-dev libao-dev libpulse-dev</code></pre><hr><h2 id="2-安装shairport"><a href="#2-安装shairport" class="headerlink" title="2 安装shairport"></a>2 安装shairport</h2><pre><code class="bash">sudo apt-get install shairport-sync</code></pre><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;无线音箱，DLNA推送音频，gmediarender -f “raspberry pi”&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="dlna" scheme="http://yousite.com/tags/dlna/"/>
    
      <category term="airport" scheme="http://yousite.com/tags/airport/"/>
    
  </entry>
  
  <entry>
    <title>VLC-pi-窃听风云</title>
    <link href="http://yousite.com/2019/12/10/VLC-%E6%A0%91%E8%8E%93%E6%B4%BE-%E7%AA%83%E5%90%AC%E9%A3%8E%E4%BA%91/"/>
    <id>http://yousite.com/2019/12/10/VLC-%E6%A0%91%E8%8E%93%E6%B4%BE-%E7%AA%83%E5%90%AC%E9%A3%8E%E4%BA%91/</id>
    <published>2019-12-10T07:57:00.000Z</published>
    <updated>2020-02-05T09:20:00.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>树莓派</li><li>usb麦克风</li><li>VLC App</li><li>耳机<a id="more"></a></li></ul><hr><hr><h1 id="基于树莓派实现“窃听风云”"><a href="#基于树莓派实现“窃听风云”" class="headerlink" title="基于树莓派实现“窃听风云”"></a>基于树莓派实现“窃听风云”</h1><h2 id="01-所需材料"><a href="#01-所需材料" class="headerlink" title="01 所需材料"></a>01 所需材料</h2><hr><p>1.树莓派 <strong>带 usb声卡</strong><br>2.usb麦克风<br>3.VPS服务器<br><strong>一般家庭的宽带都不是公网IP，外网无法直接连接，所以需要使用VPS服务器来实现FRP内网穿透，这样就可以直接访问家庭内部主机了。</strong><br>4.手机<br>5.VLC app<br><strong>VLC 是一款自由、开源的跨平台多媒体播放器及框架，可播放大多数多媒体文件，以及 DVD、音频 CD、VCD 及各类流媒体协议。</strong><br>6.耳机</p><hr><h2 id="02-技术介绍"><a href="#02-技术介绍" class="headerlink" title="02 技术介绍"></a>02 技术介绍</h2><h3 id="使用-nginx-rtmp搭建音频直播流媒体服务器和FRP内网穿透。"><a href="#使用-nginx-rtmp搭建音频直播流媒体服务器和FRP内网穿透。" class="headerlink" title="使用 nginx+rtmp搭建音频直播流媒体服务器和FRP内网穿透。"></a>使用 nginx+rtmp搭建音频直播流媒体服务器和FRP内网穿透。</h3><ul><li><p>Nginx 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务</p></li><li><p>RTMP协议是Real Time Message Protocol(实时信息传输协议)的缩写，它是由Adobe公司提出的一种应用层的协议，用来解决多媒体数据传输流的多路复用（Multiplexing）和分包（packetizing）的问题。随着VR技术的发展，视频直播等领域逐渐活跃起来，RTMP作为业内广泛使用的协议也重新被相关开发者重视起来。</p></li><li><p>FRP是fast reverse proxy的缩写，简单地说，FRP就是一个反向代理软件，它具有体积轻量且功能强大特点，可以使处于内网或防火墙后的设备对外界提供服务。</p></li></ul><hr><h2 id="03-环境搭建"><a href="#03-环境搭建" class="headerlink" title="03 环境搭建"></a>03 环境搭建</h2><h3 id="3-1-在树莓派上使用nginx-rtmp搭建音频直播流媒体服务器"><a href="#3-1-在树莓派上使用nginx-rtmp搭建音频直播流媒体服务器" class="headerlink" title="3.1 在树莓派上使用nginx+rtmp搭建音频直播流媒体服务器"></a>3.1 在树莓派上使用nginx+rtmp搭建音频直播流媒体服务器</h3><h4 id="1-安装所需要的依赖"><a href="#1-安装所需要的依赖" class="headerlink" title="1. 安装所需要的依赖"></a>1. 安装所需要的依赖</h4><pre><code class="bash">sudo apt-get install build-essential libpcre3 libpcre3-dev libssl-dev</code></pre><h4 id="2-安装nginx和rtmp"><a href="#2-安装nginx和rtmp" class="headerlink" title="2. 安装nginx和rtmp"></a>2. 安装nginx和rtmp</h4><pre><code class="bash">wget http://nginx.org/download/nginx-1.17.0.tar.gzwget https://github.com/arut/nginx-rtmp-module/archive/master.ziptar -zxvf nginx-1.17.0.tar.gzunzip master.zipcd nginx-1.17.0./configure --with-http_ssl_module --add-module=../nginx-rtmp-module-mastersudo makesudo make install</code></pre><h4 id="3-修改nginx配置文件"><a href="#3-修改nginx配置文件" class="headerlink" title="3. 修改nginx配置文件"></a>3. 修改nginx配置文件</h4><p><strong>执行 sudo nano /usr/local/nginx/conf/nginx.conf，追加如下内容。</strong></p><pre><code class="bash"># RTMP协议rtmp {   # 创建一个服务，监听1935端口，这个是RTMP默认的端口    server {        listen 1935;   #默认端口        chunk_size 4096;        # 创建了一个名为live的应用， 支持直播        application live {            live on;         }    }}</code></pre><h4 id="4-启动nginx-rtmp流媒体服务器"><a href="#4-启动nginx-rtmp流媒体服务器" class="headerlink" title="4. 启动nginx+rtmp流媒体服务器"></a>4. 启动nginx+rtmp流媒体服务器</h4><pre><code class="bash">sudo /usr/local/nginx/sbin/nginx</code></pre><h4 id="5-安装ffmpeg"><a href="#5-安装ffmpeg" class="headerlink" title="5. 安装ffmpeg"></a>5. 安装ffmpeg</h4><pre><code class="bash">sudo apt install ffmpeg</code></pre><h4 id="6-将usb麦克风插入到树莓派的usb口，启动ffmpeg从usb麦克风实时采集音频，并推流到树莓派上搭建好的nginx-rtmp流媒体服务器上。"><a href="#6-将usb麦克风插入到树莓派的usb口，启动ffmpeg从usb麦克风实时采集音频，并推流到树莓派上搭建好的nginx-rtmp流媒体服务器上。" class="headerlink" title="6. 将usb麦克风插入到树莓派的usb口，启动ffmpeg从usb麦克风实时采集音频，并推流到树莓派上搭建好的nginx+rtmp流媒体服务器上。"></a>6. 将usb麦克风插入到树莓派的usb口，启动ffmpeg从usb麦克风实时采集音频，并推流到树莓派上搭建好的nginx+rtmp流媒体服务器上。</h4><pre><code class="bash">ffmpeg -f alsa -ac 2 -i hw:1,0 -ar 44100 -f flv rtmp://localhost/live/audio</code></pre><p>参数说明<br>主要参数</p><ul><li><p>-f 设定输出格式</p></li><li><p>-i 设定输入流（hw:1,0为外接的usb音频采集卡设备，hw:1,0的1指的是第一个外部设备，因为树莓派内部没有声卡，所以只能使用外部的usb音频采集卡）；</p></li><li><p>-ar 设定采样率（因为输出为flv格式，所以采样率只能选择44100，22050，11025这三种）；</p><h4 id="7-在windows客户端中使用VLC软件打开网络串流"><a href="#7-在windows客户端中使用VLC软件打开网络串流" class="headerlink" title="7. 在windows客户端中使用VLC软件打开网络串流"></a>7. 在windows客户端中使用VLC软件打开网络串流</h4></li></ul><p><strong>地址为“rtmp://192.168.1.150/live/audio”，即可收听到树莓派麦克风上捕获到的声音。当前，可以在树莓派相同的wifi网络下，可以实现窃听，如果想要实现在任何地方的外网收听，还需要实现下面的FRP内网穿透。</strong></p><hr><h3 id="3-2-在树莓派上搭建FRP内网穿透服务"><a href="#3-2-在树莓派上搭建FRP内网穿透服务" class="headerlink" title="3.2 在树莓派上搭建FRP内网穿透服务"></a>3.2 在树莓派上搭建FRP内网穿透服务</h3><p><em>3.2.1服务器-frps(VPS服务器)</em></p><h4 id="1-下载程序"><a href="#1-下载程序" class="headerlink" title="1. 下载程序"></a>1. 下载程序</h4><p>我的VPS服务器是unbuntu系统，使用的是arm64架构，所以需要下载arm64架构的frp软件。</p><pre><code class="bash">wget --no-check-certificate https://github.com/fatedier/frp/releases/download/v0.20.0/frp_0.20.0_linux_amd64.tar.gz</code></pre><h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><pre><code class="bash">tar -xzvf frp_0.20.0_linux_amd64.tar.gz</code></pre><h4 id="新建文件夹"><a href="#新建文件夹" class="headerlink" title="新建文件夹"></a>新建文件夹</h4><pre><code class="bash">sudo mkdir -p /usr/local/frp</code></pre><h4 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h4><pre><code class="bash">sudo mv frp_0.18.0_linux_amd64 /usr/local/frpcd /usr/local/frp</code></pre><h4 id="确保frps程序具有可执行权限"><a href="#确保frps程序具有可执行权限" class="headerlink" title="确保frps程序具有可执行权限"></a>确保frps程序具有可执行权限</h4><pre><code class="bash">chmod +x frps</code></pre><p><em>说明：目录下只主要关注4个文件，分别是frpc、frpc.ini和frps、frps.ini，前者两个文件是客户端所关注文件，后者两个文件是服务端所关注两个文件。</em></p><h4 id="配置程序"><a href="#配置程序" class="headerlink" title="配置程序"></a>配置程序</h4><p><strong>首先删掉 frpc、frpc.ini 两个文件，然后再进行配置，nano ./frps.ini</strong></p><pre><code class="bash">[common]bindport = 9000           #与客户端绑定的进行通信的端口auto_token = hell.world      #客户端连接服务器端的口令</code></pre><p><strong>验证frps是否安装成功：</strong></p><pre><code class="bash">./frps -c frps.ini</code></pre><p><strong>使frps开机启动</strong></p><pre><code class="bash">nohup /usr/local/frpfrps -c /usr/local/frp/frps.ini &amp;编辑/etc/rc.local文件，将启动那句命令加到exit 0语句之前（如果有）</code></pre><hr><h3 id="3-2-2-客户端-frpc（树莓派）"><a href="#3-2-2-客户端-frpc（树莓派）" class="headerlink" title="3.2.2 客户端-frpc（树莓派）"></a>3.2.2 客户端-frpc（树莓派）</h3><h4 id="1-下载FRP"><a href="#1-下载FRP" class="headerlink" title="1. 下载FRP"></a>1. 下载FRP</h4><pre><code class="bash">wget https://github.com/fatedier/frp/releases/download/v0.20.0/frp_0.20.0_linux_arm.tar.gz</code></pre><h4 id="2-修改frpc-ini文件"><a href="#2-修改frpc-ini文件" class="headerlink" title="2. 修改frpc.ini文件"></a>2. 修改frpc.ini文件</h4><pre><code class="bash">[common]server_addr = XXX.XXX.XXX.XXX  #VPS服务器的公网IPserver_port = 9000                    #与服务端bind_port一致auto_token = hello.world            #客户端连接服务器端的口令</code></pre><pre><code class="bash">[RTMP]type = tcp               #连接协议local_ip = 127.0.0.1     #内网服务器iplocal_port = 1935         #RTMP默认的端口remote_port = 6000       #自定义的访问内部RTMP端口号</code></pre><h4 id="3-启动frpc"><a href="#3-启动frpc" class="headerlink" title="3. 启动frpc"></a>3. 启动frpc</h4><p><strong>执行sudo ./frpc -c ./frpc.ini启动，这是前台启动，后台启动命令为：</strong></p><pre><code class="bash">sudo nohup ./frpc -c ./frpc.ini &amp;</code></pre><hr><h2 id="04-开始远程监听"><a href="#04-开始远程监听" class="headerlink" title="04 开始远程监听"></a>04 开始远程监听</h2><ul><li><p>使用手机下载VLC Media Player，并将耳机连接到手机上（除非你想让窃听的内容被周围的人听到，当然也可以不连接耳机）。</p></li><li><p>手机上打开VLC软件，打开网络串流，地址为“rtmp://XXX.XXX.XXX.XXX:6000/live/audio” 说明：XXX.XXX.XXX.XXX为VPS服务器的IP地址。</p></li><li><p>稍等一会，在耳机中即可听到远程的实时声音。注意，声音是有延迟的，对于我的网络大概延迟2s左右，具体需要自行测量。</p></li></ul><p><em>备注：如果连接不成功，可以关闭VLC软件，重试几次即可。</em></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;树莓派&lt;/li&gt;
&lt;li&gt;usb麦克风&lt;/li&gt;
&lt;li&gt;VLC App&lt;/li&gt;
&lt;li&gt;耳机
    
    </summary>
    
    
    
      <category term="VLC" scheme="http://yousite.com/tags/VLC/"/>
    
      <category term="RTMP" scheme="http://yousite.com/tags/RTMP/"/>
    
      <category term="Nginx" scheme="http://yousite.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>树莓派</title>
    <link href="http://yousite.com/2019/12/04/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    <id>http://yousite.com/2019/12/04/%E6%A0%91%E8%8E%93%E6%B4%BE/</id>
    <published>2019-12-04T13:25:44.000Z</published>
    <updated>2019-12-04T13:25:44.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yousite.com/2019/12/02/hello-world/"/>
    <id>http://yousite.com/2019/12/02/hello-world/</id>
    <published>2019-12-02T08:58:02.033Z</published>
    <updated>2019-12-02T08:58:02.033Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
