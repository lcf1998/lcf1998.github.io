<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>有趣的蜜罐人</title>
  
  <subtitle>I am networker</subtitle>
  <link href="//atom.xml" rel="self"/>
  
  <link href="http://yousite.com/"/>
  <updated>2020-02-04T09:18:56.000Z</updated>
  <id>http://yousite.com/</id>
  
  <author>
    <name>Lee Jerry</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>树莓派-linux-dash</title>
    <link href="http://yousite.com/2020/02/04/%E6%A0%91%E8%8E%93%E6%B4%BE-linux-dash/"/>
    <id>http://yousite.com/2020/02/04/%E6%A0%91%E8%8E%93%E6%B4%BE-linux-dash/</id>
    <published>2020-02-04T09:18:56.000Z</published>
    <updated>2020-02-04T09:18:56.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>linux-dash/app/server</li><li>node index.js –port 1234<a id="more"></a></li></ul><hr><h1 id="基于树莓派搭建一个实现实时监控系统"><a href="#基于树莓派搭建一个实现实时监控系统" class="headerlink" title="基于树莓派搭建一个实现实时监控系统"></a>基于树莓派搭建一个实现实时监控系统</h1><p>—体积小，速度快，配置方便—</p><h2 id="1-安装linux-dash"><a href="#1-安装linux-dash" class="headerlink" title="1 安装linux-dash"></a>1 安装linux-dash</h2><hr><pre><code>git clone --depth 1 https://github.com/afaqurk/linux-dashcd linux-dash/app/server</code></pre><hr><h2 id="2-使用Nodejs运行Linux-Dash"><a href="#2-使用Nodejs运行Linux-Dash" class="headerlink" title="2 使用Nodejs运行Linux-Dash"></a>2 使用Nodejs运行Linux-Dash</h2><hr><p><em>安装 nodejs –<a href="">树莓派安装配置nodejs</a>– 这篇教程</em></p><hr><h2 id="3-安装依赖"><a href="#3-安装依赖" class="headerlink" title="3 安装依赖"></a>3 安装依赖</h2><hr><ul><li>在linux-dash/app/server文件夹下输入命令</li></ul><pre><code>npm install --production</code></pre><p><em>(这个过程需要等待)</em></p><h2 id="4-启动linux-dash"><a href="#4-启动linux-dash" class="headerlink" title="4 启动linux-dash"></a>4 启动linux-dash</h2><hr><ul><li>在linux-dash/app/server目录下执行以下命令</li></ul><pre><code>sudo node index.js --port 1234(如果不指定端口，会默认80端口)</code></pre><ul><li>然后打开浏览器，http://树莓派的ip:端口</li></ul><hr><ul><li>用Pyhton语言运行</li></ul><pre><code>python index.py --port 1234</code></pre><ul><li>用Go语言运行</li></ul><pre><code>go run index.go --port 1234</code></pre><p><em>(python 运行执行出来的结果不理想不建议)</em></p><h2 id="5-开机自启动linux-dash"><a href="#5-开机自启动linux-dash" class="headerlink" title="5 开机自启动linux-dash"></a>5 开机自启动linux-dash</h2><p>新建一个脚本linux-dash.sh</p><pre><code>#!/bin/bashcd /linux-dash/app/serversudo node index.js --port 1111(端口号随便定)</code></pre><p>修改文件其权限</p><pre><code>sudo chmod 755 linux-dash.sh</code></pre><p><em>把linux-dash.sh脚本放进/etc/profile.d/</em><br><em>重启电脑就OK了</em></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;linux-dash/app/server&lt;/li&gt;
&lt;li&gt;node index.js –port 1234
    
    </summary>
    
    
    
      <category term="raspberry pi" scheme="http://yousite.com/tags/raspberry-pi/"/>
    
      <category term="linux-dash" scheme="http://yousite.com/tags/linux-dash/"/>
    
  </entry>
  
  <entry>
    <title>树莓派-gmediarender-无线音箱</title>
    <link href="http://yousite.com/2020/02/04/%E6%A0%91%E8%8E%93%E6%B4%BE-gmediarender-%E6%97%A0%E7%BA%BF%E9%9F%B3%E7%AE%B1/"/>
    <id>http://yousite.com/2020/02/04/%E6%A0%91%E8%8E%93%E6%B4%BE-gmediarender-%E6%97%A0%E7%BA%BF%E9%9F%B3%E7%AE%B1/</id>
    <published>2020-02-04T09:06:12.000Z</published>
    <updated>2020-02-04T09:06:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>无线音箱，DLNA推送音频，gmediarender -f “raspberry pi”</p><a id="more"></a><h1 id="基于gmediarender树莓派搭建DLNA客户端，只支持音频"><a href="#基于gmediarender树莓派搭建DLNA客户端，只支持音频" class="headerlink" title="基于gmediarender树莓派搭建DLNA客户端，只支持音频"></a>基于gmediarender树莓派搭建DLNA客户端，只支持音频</h1><p>目前搭建DLNA服务器有minidlna，不过不能进行DLNA推送，只能执行树莓派的媒体服务器</p><hr><h2 id="1-更新源，安装依赖"><a href="#1-更新源，安装依赖" class="headerlink" title="1 更新源，安装依赖"></a>1 更新源，安装依赖</h2><pre><code>sudo apt-get updatesudo apt-get install libupnp-dev libgstreamer1.0-dev \gstreamer1.0-plugins-base gstreamer1.0-plugins-good\gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly \gstreamer1.0-alsa autoconf</code></pre><hr><h2 id="2-安装gmediarender"><a href="#2-安装gmediarender" class="headerlink" title="2 安装gmediarender"></a>2 安装gmediarender</h2><pre><code>git clone https://github.com/hzeller/gmrender-resurrect.gitcd gmrender-resurrectsudo ./autogen.shsudo ./configuresudo make sudo make install</code></pre><hr><h2 id="3-启动gmediarender"><a href="#3-启动gmediarender" class="headerlink" title="3 启动gmediarender"></a>3 启动gmediarender</h2><pre><code>sudo gmediarender -f &quot;输入DLNA设备名称&quot;</code></pre><hr><h2 id="4-添加到启动项"><a href="#4-添加到启动项" class="headerlink" title="4 添加到启动项"></a>4 添加到启动项</h2><pre><code>sudo nano /etc/rc.local</code></pre><p><em>在exit 0 前添加</em></p><pre><code class="bash">sudo gmediarender -f &quot;设备名称&quot; &amp;</code></pre><p><em>&amp;的意思是作为系统进程开机运行</em></p><hr><hr><h1 id="基于树莓派的Airplay无线音频传输"><a href="#基于树莓派的Airplay无线音频传输" class="headerlink" title="基于树莓派的Airplay无线音频传输"></a>基于树莓派的Airplay无线音频传输</h1><h2 id="1-安装依赖工具包"><a href="#1-安装依赖工具包" class="headerlink" title="1 安装依赖工具包"></a>1 安装依赖工具包</h2><pre><code>sudo apt-get install libssl-dev libavahi-client-dev libasound2-dev libao-dev libpulse-dev</code></pre><hr><h2 id="2-安装shairport"><a href="#2-安装shairport" class="headerlink" title="2 安装shairport"></a>2 安装shairport</h2><pre><code>sudo apt-get install shairport-sync</code></pre><hr>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;无线音箱，DLNA推送音频，gmediarender -f “raspberry pi”&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="dlna" scheme="http://yousite.com/tags/dlna/"/>
    
      <category term="airport" scheme="http://yousite.com/tags/airport/"/>
    
  </entry>
  
  <entry>
    <title>VLC-pi-窃听风云</title>
    <link href="http://yousite.com/2019/12/10/VLC-%E6%A0%91%E8%8E%93%E6%B4%BE-%E7%AA%83%E5%90%AC%E9%A3%8E%E4%BA%91/"/>
    <id>http://yousite.com/2019/12/10/VLC-%E6%A0%91%E8%8E%93%E6%B4%BE-%E7%AA%83%E5%90%AC%E9%A3%8E%E4%BA%91/</id>
    <published>2019-12-10T07:57:00.000Z</published>
    <updated>2020-02-05T09:20:00.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>树莓派</li><li>usb麦克风</li><li>VLC App</li><li>耳机<a id="more"></a></li></ul><hr><hr><h1 id="基于树莓派实现“窃听风云”"><a href="#基于树莓派实现“窃听风云”" class="headerlink" title="基于树莓派实现“窃听风云”"></a>基于树莓派实现“窃听风云”</h1><h2 id="01-所需材料"><a href="#01-所需材料" class="headerlink" title="01 所需材料"></a>01 所需材料</h2><hr><p>1.树莓派 <strong>带 usb声卡</strong><br>2.usb麦克风<br>3.VPS服务器<br><strong>一般家庭的宽带都不是公网IP，外网无法直接连接，所以需要使用VPS服务器来实现FRP内网穿透，这样就可以直接访问家庭内部主机了。</strong><br>4.手机<br>5.VLC app<br><strong>VLC 是一款自由、开源的跨平台多媒体播放器及框架，可播放大多数多媒体文件，以及 DVD、音频 CD、VCD 及各类流媒体协议。</strong><br>6.耳机</p><hr><h2 id="02-技术介绍"><a href="#02-技术介绍" class="headerlink" title="02 技术介绍"></a>02 技术介绍</h2><h3 id="使用-nginx-rtmp搭建音频直播流媒体服务器和FRP内网穿透。"><a href="#使用-nginx-rtmp搭建音频直播流媒体服务器和FRP内网穿透。" class="headerlink" title="使用 nginx+rtmp搭建音频直播流媒体服务器和FRP内网穿透。"></a>使用 nginx+rtmp搭建音频直播流媒体服务器和FRP内网穿透。</h3><ul><li><p>Nginx 是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务</p></li><li><p>RTMP协议是Real Time Message Protocol(实时信息传输协议)的缩写，它是由Adobe公司提出的一种应用层的协议，用来解决多媒体数据传输流的多路复用（Multiplexing）和分包（packetizing）的问题。随着VR技术的发展，视频直播等领域逐渐活跃起来，RTMP作为业内广泛使用的协议也重新被相关开发者重视起来。</p></li><li><p>FRP是fast reverse proxy的缩写，简单地说，FRP就是一个反向代理软件，它具有体积轻量且功能强大特点，可以使处于内网或防火墙后的设备对外界提供服务。</p></li></ul><hr><h2 id="03-环境搭建"><a href="#03-环境搭建" class="headerlink" title="03 环境搭建"></a>03 环境搭建</h2><h3 id="3-1-在树莓派上使用nginx-rtmp搭建音频直播流媒体服务器"><a href="#3-1-在树莓派上使用nginx-rtmp搭建音频直播流媒体服务器" class="headerlink" title="3.1 在树莓派上使用nginx+rtmp搭建音频直播流媒体服务器"></a>3.1 在树莓派上使用nginx+rtmp搭建音频直播流媒体服务器</h3><h4 id="1-安装所需要的依赖"><a href="#1-安装所需要的依赖" class="headerlink" title="1. 安装所需要的依赖"></a>1. 安装所需要的依赖</h4><pre><code class="bash">sudo apt-get install build-essential libpcre3 libpcre3-dev libssl-dev</code></pre><h4 id="2-安装nginx和rtmp"><a href="#2-安装nginx和rtmp" class="headerlink" title="2. 安装nginx和rtmp"></a>2. 安装nginx和rtmp</h4><pre><code class="bash">wget http://nginx.org/download/nginx-1.17.0.tar.gzwget https://github.com/arut/nginx-rtmp-module/archive/master.ziptar -zxvf nginx-1.17.0.tar.gzunzip master.zipcd nginx-1.17.0./configure --with-http_ssl_module --add-module=../nginx-rtmp-module-mastersudo makesudo make install</code></pre><h4 id="3-修改nginx配置文件"><a href="#3-修改nginx配置文件" class="headerlink" title="3. 修改nginx配置文件"></a>3. 修改nginx配置文件</h4><p><strong>执行 sudo nano /usr/local/nginx/conf/nginx.conf，追加如下内容。</strong></p><pre><code class="bash"># RTMP协议rtmp {   # 创建一个服务，监听1935端口，这个是RTMP默认的端口    server {        listen 1935;   #默认端口        chunk_size 4096;        # 创建了一个名为live的应用， 支持直播        application live {            live on;         }    }}</code></pre><h4 id="4-启动nginx-rtmp流媒体服务器"><a href="#4-启动nginx-rtmp流媒体服务器" class="headerlink" title="4. 启动nginx+rtmp流媒体服务器"></a>4. 启动nginx+rtmp流媒体服务器</h4><pre><code class="bash">sudo /usr/local/nginx/sbin/nginx</code></pre><h4 id="5-安装ffmpeg"><a href="#5-安装ffmpeg" class="headerlink" title="5. 安装ffmpeg"></a>5. 安装ffmpeg</h4><pre><code class="bash">sudo apt install ffmpeg</code></pre><h4 id="6-将usb麦克风插入到树莓派的usb口，启动ffmpeg从usb麦克风实时采集音频，并推流到树莓派上搭建好的nginx-rtmp流媒体服务器上。"><a href="#6-将usb麦克风插入到树莓派的usb口，启动ffmpeg从usb麦克风实时采集音频，并推流到树莓派上搭建好的nginx-rtmp流媒体服务器上。" class="headerlink" title="6. 将usb麦克风插入到树莓派的usb口，启动ffmpeg从usb麦克风实时采集音频，并推流到树莓派上搭建好的nginx+rtmp流媒体服务器上。"></a>6. 将usb麦克风插入到树莓派的usb口，启动ffmpeg从usb麦克风实时采集音频，并推流到树莓派上搭建好的nginx+rtmp流媒体服务器上。</h4><pre><code class="bash">ffmpeg -f alsa -ac 2 -i hw:1,0 -ar 44100 -f flv rtmp://localhost/live/audio</code></pre><p>参数说明<br>主要参数</p><ul><li><p>-f 设定输出格式</p></li><li><p>-i 设定输入流（hw:1,0为外接的usb音频采集卡设备，hw:1,0的1指的是第一个外部设备，因为树莓派内部没有声卡，所以只能使用外部的usb音频采集卡）；</p></li><li><p>-ar 设定采样率（因为输出为flv格式，所以采样率只能选择44100，22050，11025这三种）；</p></li></ul><h4 id="7-在windows客户端中使用VLC软件打开网络串流"><a href="#7-在windows客户端中使用VLC软件打开网络串流" class="headerlink" title="7. 在windows客户端中使用VLC软件打开网络串流"></a>7. 在windows客户端中使用VLC软件打开网络串流</h4><p><strong>地址为“rtmp://192.168.1.150/live/audio”，即可收听到树莓派麦克风上捕获到的声音。当前，可以在树莓派相同的wifi网络下，可以实现窃听，如果想要实现在任何地方的外网收听，还需要实现下面的FRP内网穿透。</strong></p><hr><h3 id="3-2-在树莓派上搭建FRP内网穿透服务"><a href="#3-2-在树莓派上搭建FRP内网穿透服务" class="headerlink" title="3.2 在树莓派上搭建FRP内网穿透服务"></a>3.2 在树莓派上搭建FRP内网穿透服务</h3><p><em>3.2.1服务器-frps(VPS服务器)</em></p><h4 id="1-下载程序"><a href="#1-下载程序" class="headerlink" title="1. 下载程序"></a>1. 下载程序</h4><p>我的VPS服务器是unbuntu系统，使用的是arm64架构，所以需要下载arm64架构的frp软件。</p><pre><code class="bash">wget --no-check-certificate https://github.com/fatedier/frp/releases/download/v0.20.0/frp_0.20.0_linux_amd64.tar.gz</code></pre><h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><pre><code>tar -xzvf frp_0.20.0_linux_amd64.tar.gz</code></pre><h4 id="新建文件夹"><a href="#新建文件夹" class="headerlink" title="新建文件夹"></a>新建文件夹</h4><pre><code>sudo mkdir -p /usr/local/frp</code></pre><h4 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h4><pre><code>sudo mv frp_0.18.0_linux_amd64 /usr/local/frpcd /usr/local/frp</code></pre><h4 id="确保frps程序具有可执行权限"><a href="#确保frps程序具有可执行权限" class="headerlink" title="确保frps程序具有可执行权限"></a>确保frps程序具有可执行权限</h4><pre><code>chmod +x frps</code></pre><p><em>说明：目录下只主要关注4个文件，分别是frpc、frpc.ini和frps、frps.ini，<br>前者两个文件是客户端所关注文件，后者两个文件是服务端所关注两个文件。</em></p><h4 id="配置程序"><a href="#配置程序" class="headerlink" title="配置程序"></a>配置程序</h4><p><strong>首先删掉 frpc、frpc.ini 两个文件，然后再进行配置，nano ./frps.ini</strong></p><pre><code>[common]bindport = 9000           #与客户端绑定的进行通信的端口auto_token = hell.world      #客户端连接服务器端的口令</code></pre><p><strong>验证frps是否安装成功：</strong></p><pre><code>./frps -c frps.ini</code></pre><p><strong>使frps开机启动</strong></p><pre><code>nohup /usr/local/frpfrps -c /usr/local/frp/frps.ini &amp;编辑/etc/rc.local文件，将启动那句命令加到exit 0语句之前（如果有）</code></pre><hr><h3 id="3-2-2-客户端-frpc（树莓派）"><a href="#3-2-2-客户端-frpc（树莓派）" class="headerlink" title="3.2.2 客户端-frpc（树莓派）"></a>3.2.2 客户端-frpc（树莓派）</h3><h4 id="1-下载FRP"><a href="#1-下载FRP" class="headerlink" title="1. 下载FRP"></a>1. 下载FRP</h4><pre><code>wget https://github.com/fatedier/frp/releases/download/v0.20.0/frp_0.20.0_linux_arm.tar.gz</code></pre><h4 id="2-修改frpc-ini文件"><a href="#2-修改frpc-ini文件" class="headerlink" title="2. 修改frpc.ini文件"></a>2. 修改frpc.ini文件</h4><pre><code>[common]server_addr = XXX.XXX.XXX.XXX  #VPS服务器的公网IPserver_port = 9000                    #与服务端bind_port一致auto_token = hello.world            #客户端连接服务器端的口令</code></pre><hr><pre><code>[RTMP]type = tcp               #连接协议local_ip = 127.0.0.1     #内网服务器iplocal_port = 1935         #RTMP默认的端口remote_port = 6000       #自定义的访问内部RTMP端口号</code></pre><h4 id="3-启动frpc"><a href="#3-启动frpc" class="headerlink" title="3. 启动frpc"></a>3. 启动frpc</h4><p><strong>执行sudo ./frpc -c ./frpc.ini启动，这是前台启动，后台启动命令为：</strong></p><pre><code>sudo nohup ./frpc -c ./frpc.ini &amp;</code></pre><hr><h2 id="04-开始远程监听"><a href="#04-开始远程监听" class="headerlink" title="04 开始远程监听"></a>04 开始远程监听</h2><ul><li><p>使用手机下载VLC Media Player，并将耳机连接到手机上（除非你想让窃听的内容被周围的人听到，当然也可以不连接耳机）。</p></li><li><p>手机上打开VLC软件，打开网络串流，地址为“rtmp://XXX.XXX.XXX.XXX:6000/live/audio” 说明：XXX.XXX.XXX.XXX为VPS服务器的IP地址。</p></li><li><p>稍等一会，在耳机中即可听到远程的实时声音。注意，声音是有延迟的，对于我的网络大概延迟2s左右，具体需要自行测量。</p></li></ul><p><em>备注：如果连接不成功，可以关闭VLC软件，重试几次即可。</em></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;树莓派&lt;/li&gt;
&lt;li&gt;usb麦克风&lt;/li&gt;
&lt;li&gt;VLC App&lt;/li&gt;
&lt;li&gt;耳机
    
    </summary>
    
    
    
      <category term="VLC" scheme="http://yousite.com/tags/VLC/"/>
    
      <category term="RTMP" scheme="http://yousite.com/tags/RTMP/"/>
    
      <category term="Nginx" scheme="http://yousite.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>树莓派</title>
    <link href="http://yousite.com/2019/12/04/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    <id>http://yousite.com/2019/12/04/%E6%A0%91%E8%8E%93%E6%B4%BE/</id>
    <published>2019-12-04T13:25:44.000Z</published>
    <updated>2019-12-04T13:25:44.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>辨析 Sass 中的 Map 和 List</title>
    <link href="http://yousite.com/2015/10/21/demo/"/>
    <id>http://yousite.com/2015/10/21/demo/</id>
    <published>2015-10-21T02:34:12.000Z</published>
    <updated>2015-10-21T02:34:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果你使用过 Sass 3.3 之前的版本，那么你一定对那段时光颇有感触，那时候没有现如今这么好的条件，那时候的 Map 还只能用多重列表（lists of list）来模拟。多重列表可以实现复杂数据的嵌套定义，但却不是以键值对的形式实现的，所有当我们需要获取其中特定的某一项时就会比较麻烦。Map 这种数据类型天生就是基于键值对的形式，非常便于组织数据。</p><p>自从可以使用 Map 之后，开发者们开始毫无顾忌地定义 Map 存储数据，比如断点宽度、颜色值、栅格布局等等响应式排版的细节，都被一股脑的塞进了 Map 中。</p><p>那么，有了 Map 之后，我们还有必要使用 List 吗？可能某些人会觉得为了保持向后兼容应该继续使用多重列表模拟 Map，因为可能有些开发者仍然在使用老版本的 Sass 编译器，但实际上，这是多此一举了，Sass 的版本通常由 <code>package.json</code> 或者其他同类型的项目配置文件所控制，往往只需一条命令（<code>gem update sass</code>）即可更新 Sass 的版本，因此基本上无需考虑对老版本的兼容问题。</p><a id="more"></a><p>使用多重列表替代 Map 的优势之一就是减少代码量。下面让我们来比较一下多种列表和 Map 的语法结构以及遍历方式。</p><h2 id="测试表格"><a href="#测试表格" class="headerlink" title="测试表格"></a>测试表格</h2><table><thead><tr><th>Variable</th><th>Description</th></tr></thead><tbody><tr><td><code>site</code></td><td>Sitewide information.</td></tr><tr><td><code>page</code></td><td>Page specific information and custom variables set in front-matter.</td></tr><tr><td><code>config</code></td><td>Site configuration</td></tr><tr><td><code>theme</code></td><td>Theme configuration. Inherits from site configuration.</td></tr><tr><td><code>_</code> (single underscore)</td><td><a href="http://lodash.com/" target="_blank" rel="noopener">Lodash</a> library</td></tr><tr><td><code>path</code></td><td>Path of current page</td></tr><tr><td><code>url</code></td><td>Full URL of current page</td></tr><tr><td><code>env</code></td><td>Environment variables</td></tr></tbody></table><h2 id="语法比较"><a href="#语法比较" class="headerlink" title="语法比较"></a>语法比较</h2><div class="note">    <h5>测试标题</h5>    <p>在下面的示例中，我创建了一个用于控制响应式布局的数据，该数据一共有四个断点，每一个断点都包含了 `min-width`、`max-width`、`font-size` 和 `line-height` 四个样式。</p></div><h4 id="Map-语法"><a href="#Map-语法" class="headerlink" title="Map 语法"></a>Map 语法</h4><p>下面就是使用 Map 存储的数据，具体来说，该 Map 中首先存储了四个用于标识断点的 Key，相对应的是保存具体属性值得 Value。虽然这种形式可读性更高，但是总体代码量却高达 26 行 450 个字符。</p><pre><code class="sass">$breakpoint-map: (    small: (        min-width: null,        max-width: 479px,        base-font: 16px,        vertical-rhythm: 1.3    ),    medium: (        min-width: 480px,        max-width: 959px,        base-font: 18px,        vertical-rhythm: 1.414    ),    large: (        min-width: 960px,        max-width: 1099px,        base-font: 18px,        vertical-rhythm: 1.5    ),    xlarge: (        min-width: 1100px,        max-width: null,        base-font: 21px,        vertical-rhythm: 1.618    ));</code></pre><h4 id="多重列表语法"><a href="#多重列表语法" class="headerlink" title="多重列表语法"></a>多重列表语法</h4><p>下面的多重列表存储了和上面 Map 同样的数据，在多重列表中没有 Key-Value 的对应关系，这意味着要想找到特定的值，必须使用遍历或 <code>nth()</code> 的方式来实现了。从另一个角度来看，多种列表又比 Map 的代码量小得多，总共只有六行 180 个字符。</p><pre><code class="sass">$breakpoint-list: (    (small, null, 479px, 16px, 1.3),    (medium, 480px, 959px, 18px, 1.414),    (large, 960px, 1099px, 18px, 1.5),    (xlarge, 1100px, null, 21px, 1.618));</code></pre><h2 id="遍历比较"><a href="#遍历比较" class="headerlink" title="遍历比较"></a>遍历比较</h2><div class="note info">    <h5>测试标题</h5>    <p>从上面简单地比较中可以粗略的看出，多种列表的代码量明显少于 Map。但是，如果我们需要遍历这些值得话，复杂度又是怎样的呢？</p></div><h4 id="遍历-Map"><a href="#遍历-Map" class="headerlink" title="遍历 Map"></a>遍历 Map</h4><p>我们可以使用如下的代码遍历 Map：</p><pre><code class="sass">@each $label, $map in $breakpoint-map {}</code></pre><p>这里的变量 <code>$label</code> 和 <code>$map</code> 会随着对 <code>$breakpoint-map</code> 的遍历被动态地赋值，<code>$label</code> 将会被赋值为 <code>$breakpoint-map</code> 的 Key，而 <code>$map</code> 会被赋值为 <code>$breakpoint-map</code> 的 Value。为了在遍历过程中获取特定值，我们就需要使用 Sass 原生的 <code>map-get()</code> 函数，使用该函数需要传入两个参数：Map 的名字和求取的 Key，最后返回该 Map 中匹配该 Key 的 Value。</p><p>具体的做法就是使用 <code>@each</code> 遍历 Map，然后使用 <code>map-get()</code> 获取特定值，最终只需要六行代码 220 个字符即可完成整个遍历：</p><pre><code class="sass">@each $label, $map in $breakpoint-map {    $min-width: map-get($map, min-width);    $max-width: map-get($map, max-width);    $base-font: map-get($map, base-font);    $vertical-rhythm: map-get($map, vertical-rhythm);}</code></pre><h4 id="遍历多重列表"><a href="#遍历多重列表" class="headerlink" title="遍历多重列表"></a>遍历多重列表</h4><p>遍历多重列表不必像遍历 Map 一样动态获取到 Map 后再使用 <code>map-get()</code> 函数取特定值，直接遍历一遍即可获得特定值。</p><p>因为多种列表内层的每一个列表结构相同，都有按照相同顺序排列的五个值，所以我们可以持续遍历每个值并赋值给特定的变量。无需调用 <code>map-get()</code>，直接引用这些变量即可进行赋值等裸机操作。最终遍历多重列表只使用了两行代码 100 个字符：</p><pre><code class="sass">@each $label, $min-width, $max-width, $base-font, $vertical-rhythm in $breakpoint-list {}</code></pre><h2 id="慎用多重列表"><a href="#慎用多重列表" class="headerlink" title="慎用多重列表"></a>慎用多重列表</h2><div class="note warning">    <h5>测试标题</h5>    <p>经过上述的比对，看起来多重列表各方面都在碾压 Map，实则不然，Sass 中添加 Map 有一条非常重要的原因就是：Key-Value 的映射关系。</p></div><h4 id="遗漏键值"><a href="#遗漏键值" class="headerlink" title="遗漏键值"></a>遗漏键值</h4><p>如果要使用多重列表，那么就必须保证自己非常熟悉多重列表内部的每一项所代表的意义。下面我们举个例子，来看看遗漏了某些值的情况：</p><pre><code class="sass">$breakpoint-list: (    (small, null, 479px, 16px, 1.3),    (medium, 480px, 959px, 18px, 1.414),    (large, 960px, 1099px, 18px, 1.5),    (xlarge, 1100px, 21px, 1.618));p {    @each $label, $min-width, $max-width, $base-font, $vertical-rhythm in $breakpoint-list {        @if $min-width {            @include breakpoint( $min-width ) {                font-size: $base-font;                line-height: $vertical-rhythm;            }        } @else {            font-size: $base-font;            line-height: $vertical-rhythm;        }    }}</code></pre><p>当我们尝试运行这段代码时，结果肯定是错误地，因为在 <code>$breakpoint-list</code> 的最后一行，<code>xlarge</code> 被赋值给了 <code>$label</code>，<code>1100px</code> 被赋值给了 <code>$min-width</code>，<code>21px</code> 被赋值给了 <code>$max-width</code>, <code>1.618</code> 被赋值给了 <code>$base-font</code>，最终导致 <code>$vertical-rhythm</code> 没有被赋值，结果就是 <code>font-size</code> 的属性值是错的，<code>line-height</code> 的属性值是空的。此外，Sass 还不会对此抛出错误，导致我们无从知晓错误所在。</p><p>如果我们使用 Map 来代替这里的多重列表，那么使用 <code>map-get()</code> 函数即使遇见空值也能正确获得想要的结果。这就是值得我们慎重思考的地方：多种列表虽然简单快速，但是丧失了 Map 中的容错能力和快速取值能力。</p><h4 id="查找特定列表"><a href="#查找特定列表" class="headerlink" title="查找特定列表"></a>查找特定列表</h4><p>在多重列表中查找特定列表简直就是一种折磨。如果使用 Map，那么配合 <code>map-get()</code> 函数可以快速定位到特定子 Map：</p><pre><code class="sass">$medium-map: map-get($maps, medium);</code></pre><p>但如果要获取多种列表 <code>medium</code> 列表，麻烦可就大了：</p><pre><code class="sass">@function get-list($label) {    @each $list in $breakpoint-list {        @if nth($list, 1) == $label {            @return $list;        }    }    @return null;}$medium-list: get-list(medium);</code></pre><p>这段代码的逻辑就是遍历整个多重列表，知道找到第一个匹配项，然后返回，如果一直没有找到匹配项，就一直遍历到末尾，然后返回 <code>null</code>。这实际上就是手工实现了 <code>map-get()</code> 的逻辑。</p><h4 id="缺少原生的-Map-函数"><a href="#缺少原生的-Map-函数" class="headerlink" title="缺少原生的 Map 函数"></a>缺少原生的 Map 函数</h4><p>Sass 提供了诸多的原生函数用于处理 Map 数据类型，但是多重列表是没法调用这些函数的，比如，使用 <code>map-merge()</code> 可以合并两个 Map，如果两个 Map 有相同的值，则取第二个 Map 的值为最终值。当然你也可以在多重列表中使用 <code>join()</code> 或 <code>append()</code> 来增加新列表，从而模拟出 <code>map-merge()</code> 的效果。</p><p>另一个实用的 Map 函数就是 <code>map-has-key()</code>，对于依赖 <code>map-get()</code> 的自定义函数来说，<code>map-has-key()</code> 可以用来验证特定的 Key 是否存在。但在列表中是完全没有相似的方法。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><div class="note unreleased">    <h5>Test Title</h5>    <p>相比起列表来说，Key-Value 模型的 Map 显然更有力量，原生的 Sass Map 函数更是提供了强力的数据查找和验证工具。</p></div><p>虽然多重列表代码量少，但并不能像 Map 一样进行错误检查或验证参数。在大多数时候，相比较多重列表而言，我相信 Map 是更好的选择。如果是为了更少的代码量和其他简单地调用，那么我偶尔会用用多重列表，但是从项目的宏观控制和数据存储方面显然更优秀。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果你使用过 Sass 3.3 之前的版本，那么你一定对那段时光颇有感触，那时候没有现如今这么好的条件，那时候的 Map 还只能用多重列表（lists of list）来模拟。多重列表可以实现复杂数据的嵌套定义，但却不是以键值对的形式实现的，所有当我们需要获取其中特定的某一项时就会比较麻烦。Map 这种数据类型天生就是基于键值对的形式，非常便于组织数据。&lt;/p&gt;
&lt;p&gt;自从可以使用 Map 之后，开发者们开始毫无顾忌地定义 Map 存储数据，比如断点宽度、颜色值、栅格布局等等响应式排版的细节，都被一股脑的塞进了 Map 中。&lt;/p&gt;
&lt;p&gt;那么，有了 Map 之后，我们还有必要使用 List 吗？可能某些人会觉得为了保持向后兼容应该继续使用多重列表模拟 Map，因为可能有些开发者仍然在使用老版本的 Sass 编译器，但实际上，这是多此一举了，Sass 的版本通常由 &lt;code&gt;package.json&lt;/code&gt; 或者其他同类型的项目配置文件所控制，往往只需一条命令（&lt;code&gt;gem update sass&lt;/code&gt;）即可更新 Sass 的版本，因此基本上无需考虑对老版本的兼容问题。&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="css" scheme="http://yousite.com/tags/css/"/>
    
  </entry>
  
</feed>
